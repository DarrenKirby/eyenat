import pyinaturalist


class ObservationData:
    def __init__(self, id):
        self.id = id
        f = pyinaturalist.get_observation_by_id(self.id)['results'][0]

        self.quality_grade = f['quality_grade']
        self.taxon_geoprivacy = f['taxon_geoprivacy']
        self.annotations = f['annotations']
        self.uuid = f['uuid']
        self.observed_on_details = f['observed_on_details']
        self.cached_votes_total = f['cached_votes_total']
        self.identifications_most_agree = f['identifications_most_agree']
        self.created_at_details = f['created_at_details']
        self.species_guess = f['species_guess']
        self.identifications_most_disagree = f['identifications_most_disagree']
        self.tags = f['tags']
        self.positional_accuracy = f['positional_accuracy']
        self.comments_count = f['comments_count']
        self.site_id = f['site_id']
        self.created_time_zone = f['created_time_zone']
        self.license_code = f['license_code']
        self.observed_time_zone = f['observed_time_zone']
        self.quality_metrics = f['quality_metrics']
        self.public_positional_accuracy = f['public_positional_accuracy']
        self.reviewed_by = f['reviewed_by']
        self.oauth_application_id = f['oauth_application_id']
        self.flags = f['flags']
        self.created_at = f['created_at']
        self.description = f['description']
        self.time_zone_offset = f['time_zone_offset']
        self.project_ids_with_curator_id = f['project_ids_with_curator_id']
        self.observed_on = f['observed_on']
        self.observed_on_string = f['observed_on_string']
        self.updated_at = f['updated_at']
        self.sounds = f['sounds']
        self.place_ids = f['place_ids']
        self.captive = f['captive']
        self.taxon = f['taxon']
        self.ident_taxon_ids = f['ident_taxon_ids']
        self.outlinks = f['outlinks']
        self.faves_count = f['faves_count']
        self.ofvs = f['ofvs']
        self.num_identification_agreements = f['num_identification_agreements']
        self.preferences = f['preferences']
        self.comments = f['comments']
        self.map_scale = f['map_scale']
        self.uri = f['uri']
        self.project_ids = f['project_ids']
        self.community_taxon_id = f['community_taxon_id']
        self.geojson = f['geojson']
        self.owners_identification_from_vision = f['owners_identification_from_vision']
        self.identifications_count = f['identifications_count']
        self.obscured = f['obscured']
        self.num_identification_disagreements = f['num_identification_disagreements']
        self.geoprivacy = f['geoprivacy']
        self.location = f['location']
        self.votes = f['votes']
        self.spam = f['spam']
        self.user = f['user']
        self.mappable = f['mappable']
        self.identifications_some_agree = f['identifications_some_agree']
        self.project_ids_without_curator_id = f['project_ids_without_curator_id']
        self.place_guess = f['place_guess']

        """ A list of dictionaries containing details about identifications on the observation. """
        self.identifications = f['identifications']
        self.project_observations = f['project_observations']
        self.observation_photos = f['observation_photos']
        self.photos = f['photos']
        self.community_taxon = f['community_taxon']
        self.faves = f['faves']
        self.non_owner_ids = f['non_owner_ids']
